" Configuration file for vim
filetype indent plugin on

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=dark

set clipboard+=unnamed

" List matches when tab-completing commands
set wildmenu
" use this path to look for files with gf, :find :tabfind etc
set path=**;.

" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
set nocompatible	" Use Vim defaults instead of 100% vi compatibility
set backspace=indent,eol,start	" more powerful backspacing

" Now we set some defaults for the editor
set autoindent		" always set autoindenting on
" set linebreak		" Don't wrap words by default
set textwidth=0		" Don't wrap lines by default
set nobackup		" Don't keep a backup file
set viminfo='20,\"50	" read/write a .viminfo file, don't store more than
			" 50 lines of registers
set tabstop=4
set shiftwidth=4
" it's time to stop using leading tabs.
set expandtab

set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time

set ignorecase
set smartcase		" set searches to assume caseinsensitive unless uppercase chars present

set incsearch		" search-as-you-type

set hlsearch		" highlight all things that match the search term
" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc

" turn off folding
set nofoldenable

" Always vsplit to the right
set splitright

" vim, quit leaving your trash all over my place
set directory=~/.vim/backup,~/tmp,/var/tmp,/tmp

set t_Co=256

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
syntax on


" The following are commented out as they cause vim to behave a lot
" different from regular vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
"set autowrite		" Automatically save before commands like :next and :make

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
	source /etc/vim/vimrc.local
endif

:set diffopt=vertical,filler

",v brings up .vimrc
",V reloads it making changes

map ,v :tabe ~/.vimrc<CR>
map <silent> ,V :source ~/.vimrc<CR>:filetype detect<CR>:source ~/.vimrc-after<CR>:exe ":echo 'w00t!: vimrc reloaded'"<CR>

"set mouse active
set mouse=a
map ,a :set mouse=a<CR>
map .a :set mouse=vic<CR>

" set shortcut to clear all trailing whitespace
map ,s :%s/\s\+$//g<CR>

" search for visually selected text
:vmap // y/<C-R>"<CR>

map x/ :match none<CR>

" automatically detect .ics files and set syntax accordingly
autocmd! BufRead,BufNewFile *.ics setfiletype icalendar

" associate *.foo with php filetype
au! BufRead,BufNewFile *.app.src setfiletype erlang

nmap ,n :set invnumber<CR>

nnoremap <C-n> <Esc>:cn<Esc>
nnoremap <C-p> <Esc>:cp<Esc>

let g:scmDiffUseAbsPaths = 0

set showtabline=2

" replace groups up to 4 spaces before any non-whitespace characters on all
" lines
function! SanitiseLeadSpace()
	let OK = 1
	while OK == 1
		try
            %s/^\(\s*\)\t/\1    /
			"%s/^\(\t*\)[ ]\{1,4}/\1\t/
		catch
			let OK = 0
		endtry
	endwhile
endfunction
nmap ,l :call SanitiseLeadSpace()<CR>

" switching auto-comments on and off
"
" Default the auto-commenting to :
" continue if inserting a newline in edit mode (using 'Enter')
" NOT continue if adding a newline after a comment (using 'o')
function! ToggleAutoComment()

	let a:strmatch = strridx(&formatoptions, "o")

	if a:strmatch >= 0
		set fo-=o
	else
		set fo+=o
	endif
	let a:strmatch = strridx(&formatoptions, "r")

	if a:strmatch >= 0
		set fo-=r
	else
		set fo+=r
	endif
endfunction
nmap ,c :call ToggleAutoComment()<CR>

set diffexpr=MyDiff()
function! MyDiff()
	let opt = ""
	if exists("g:diffignore") && g:diffignore != ""
			let opt = "-I " . g:diffignore
	endif
	if &diffopt =~ "icase"
		let opt = opt . "-i"
	endif
	if &diffopt =~ "iwhite"
		let opt = opt . "-b"
	endif
	silent execute "!diff -a --binary " . opt . " " . v:fname_in . " " . v:fname_new .
		\ " > " . v:fname_out
endfunction

" VAM (vim-addon-manager) stuff
fun! EnsureVamIsOnDisk(vam_install_path)
  " windows users may want to use http://mawercer.de/~marc/vam/index.php
  " to fetch VAM, VAM-known-repositories and the listed plugins
  " without having to install curl, 7-zip and git tools first
  " -> BUG [4] (git-less installation)
  let is_installed_c = "isdirectory(a:vam_install_path.'/vim-addon-manager/autoload')"
  if eval(is_installed_c)
    return 1
  else
    if 1 == confirm("Clone VAM into ".a:vam_install_path."?","&Y\n&N")
      " I'm sorry having to add this reminder. Eventually it'll pay off.
      call confirm("Remind yourself that most plugins ship with ".
                  \"documentation (README*, doc/*.txt). It is your ".
                  \"first source of knowledge. If you can't find ".
                  \"the info you're looking for in reasonable ".
                  \"time ask maintainers to improve documentation")
      call mkdir(a:vam_install_path, 'p')
      execute '!git clone --depth=1 git://github.com/MarcWeber/vim-addon-manager '.shellescape(a:vam_install_path, 1).'/vim-addon-manager'
      " VAM runs helptags automatically when you install or update
      " plugins
      exec 'helptags '.fnameescape(a:vam_install_path.'/vim-addon-manager/doc')
    endif
    return eval(is_installed_c)
  endif
endf

fun! SetupVAM()
  " Set advanced options like this:
  " let g:vim_addon_manager = {}
  " let g:vim_addon_manager['key'] = value

  " Example: drop git sources unless git is in PATH. Same plugins can
  " be installed from www.vim.org. Lookup MergeSources to get more control
  " let g:vim_addon_manager['drop_git_sources'] = !executable('git')
  " let g:vim_addon_manager.debug_activation = 1

  " VAM install location:
  let vam_install_path = expand('$HOME') . '/.vim/vim-addons'
  if !EnsureVamIsOnDisk(vam_install_path)
    echohl ErrorMsg
    echomsg "No VAM found!"
    echohl NONE
    return
  endif
  exec 'set runtimepath+='.vam_install_path.'/vim-addon-manager'

  " Tell VAM which plugins to fetch & load: Let's try to put all config
  " relevant to a single plugin just before the line that loads that plugin.
  "
  " It's probably worth investigating if ordering is important here...
  " Plugins: Vim Utilities
  "call vam#ActivateAddons(['github:tpope/vim-vividchalk'], {'auto_install' : 0})
  "colorscheme vividchalk
  call vam#ActivateAddons(['github:flazz/vim-colorschemes', 'github:altercation/vim-colors-solarized'], {'auto_install' : 0})
  set background=dark
  "colorscheme DevC++
  let g:solarized_termcolors=256
  colorscheme solarized

  " SuperTab
  let g:SuperTabDefaultCompletionType="<c-o>"
  call vam#ActivateAddons(['github:ervandew/supertab'], {'auto_install' : 0})
  call vam#ActivateAddons(['github:tsaleh/vim-align'], {'auto_install' : 0})
  " vv included for Powerline
  set laststatus=2
  "let g:Powerline_symbols = 'fancy'
  call vam#ActivateAddons(['github:Lokaltog/vim-powerline'], {'auto_install' : 0})
  call vam#ActivateAddons(['github:zhaocai/linepower.vim'], {'auto_install' : 0})
  call vam#ActivateAddons(['github:AD7six/vim-activity-log'], {'auto_install' : 0})
  "call vam#ActivateAddons(['github:Valloric/YouCompleteMe'], {'auto_install' : 0})
  "call vam#ActivateAddons(['github:dahu/SearchParty'], {'auto_install' : 0})
  call vam#ActivateAddons(['github:editorconfig/editorconfig-vim'], {'auto_install' : 0})

  call vam#ActivateAddons(['github:tpope/vim-unimpaired'], {'auto_install' : 0})
  "call vam#ActivateAddons(['github:scrooloose/syntastic'], {'auto_install' : 0})

  let g:golden_ratio_exclude_nonmodifiable = 1
  call vam#ActivateAddons(['github:roman/golden-ratio'], {'auto_install' : 0})


  " Plugins: External Utilities
  call vam#ActivateAddons(['fugitive'], {'auto_install' : 0})
  call vam#ActivateAddons(['github:mileszs/ack.vim'], {'auto_install' : 0})
  let g:ref_open="vsplit"
  call vam#ActivateAddons(['github:thinca/vim-ref'], {'auto_install' : 0})

  call vam#ActivateAddons(['github:tpope/vim-markdown'], {'auto_install' : 0})
  call vam#ActivateAddons(['github:suan/vim-instant-markdown'], {'auto_install' : 0})

  " Plugins: Unite
  call vam#ActivateAddons(['github:Shougo/vimproc.vim'], {'auto_install' : 0})
  call vam#ActivateAddons(['github:Shougo/vimshell.vim'], {'auto_install' : 0})
  call vam#ActivateAddons(['github:Shougo/unite.vim'], {'auto_install' : 0})

  nnoremap <leader>K :<C-u>Unite ref/erlang -buffer-name=erlang_docs -vertical -start-insert<CR>
  let g:unite_source_grep_command = 'ack'
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_grep_default_opts = '--noheading --nocolor '


  " Plugins: Language-specific
  call vam#ActivateAddons(['github:puppetlabs/puppet-syntax-vim'], {'auto_install' : 0})
  call vam#ActivateAddons(['github:smerrill/vagrant-vim'], {'auto_install' : 0})
  call vam#ActivateAddons(['github:uarun/vim-protobuf'], {'auto_install' : 0})

  " Plugins: Erlang
  "call vam#ActivateAddons(['github:sanmiguel/vimerl'], {'auto_install' : 0})
  call vam#ActivateAddons(['github:vim-erlang/vim-rebar'], {'auto_install' : 0})
  call vam#ActivateAddons(['github:vim-erlang/vim-erlang-omnicomplete'], {'auto_install' : 0})
  call vam#ActivateAddons(['github:vim-erlang/vim-erlang-compiler'], {'auto_install' : 0})
  call vam#ActivateAddons(['github:tpope/vim-dispatch'], {'auto_install' : 0})
  call vam#ActivateAddons(['github:vim-erlang/vim-dialyzer'], {'auto_install' : 0})
  call vam#ActivateAddons(['github:vim-erlang/vim-erlang-runtime'], {'auto_install' : 0})
  "call vam#ActivateAddons(['github:vim-erlang/vim-erlang_tools'], {'auto_install' : 0})
  call vam#ActivateAddons(['github:vim-erlang/vim-erlang-skeletons'], {'auto_install' : 0})
  let g:erlang_tags_ignore = "_rel"
  let g:erlang_tags_outfile = ".git/erlang.tags"

  set tags+="/usr/local/Cellar/erlang/R16B03-1/tags"

  call vam#ActivateAddons(['github:vim-erlang/vim-erlang-tags'], {'auto_install' : 0})
  " vim-erlang-tags

  " Plugins: Elixir
  call vam#ActivateAddons(['github:elixir-lang/vim-elixir'], {'auto_install' : 0})


  " sample: call vam#ActivateAddons(['pluginA','pluginB', ...], {'auto_install' : 0})

  " Addons are put into vam_install_path/plugin-name directory
  " unless those directories exist. Then they are activated.
  " Activating means adding addon dirs to rtp and do some additional
  " magic

  " How to find addon names?
  " - look up source from pool
  " - (<c-x><c-p> complete plugin names):
  " You can use name rewritings to point to sources:
  "    ..ActivateAddons(["github:foo", .. => github://foo/vim-addon-foo
  "    ..ActivateAddons(["github:user/repo", .. => github://user/repo
  " Also see section "2.2. names of addons and addon sources" in VAM's documentation
endfun
call SetupVAM()
" experimental [E1]: load plugins lazily depending on filetype, See
" NOTES
" experimental [E2]: run after gui has been started (gvim) [3]
" option1:  au VimEnter * call SetupVAM()
" option2:  au GUIEnter * call SetupVAM()
" See BUGS sections below [*]
" Vim 7.0 users see BUGS section [3]
