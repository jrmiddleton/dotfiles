" Configuration file for vim
filetype indent plugin on

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=dark

set clipboard+=unnamed
set completeopt=menuone ",preview

" List matches when tab-completing commands
set wildmenu
" use this path to look for files with gf, :find :tabfind etc
set path=**;.

" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
set nocompatible	" Use Vim defaults instead of 100% vi compatibility
set backspace=indent,eol,start	" more powerful backspacing

" Now we set some defaults for the editor
set autoindent		" always set autoindenting on
" set linebreak		" Don't wrap words by default
set textwidth=0		" Don't wrap lines by default
set nobackup		" Don't keep a backup file
set viminfo='20,\"50	" read/write a .viminfo file, don't store more than
			" 50 lines of registers
set tabstop=4
set shiftwidth=4
" it's time to stop using leading tabs.
set expandtab

set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time

set ignorecase
set smartcase		" set searches to assume caseinsensitive unless uppercase chars present

set incsearch		" search-as-you-type

set hlsearch		" highlight all things that match the search term
" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc

" turn off folding
set nofoldenable

" Always vsplit to the right
set splitright

" vim, quit leaving your trash all over my place
set directory=~/.vim/backup,~/tmp,/var/tmp,/tmp

set t_Co=256

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
syntax on


" The following are commented out as they cause vim to behave a lot
" different from regular vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
"set autowrite		" Automatically save before commands like :next and :make

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
	source /etc/vim/vimrc.local
endif

:set diffopt=vertical,filler

",v brings up .vimrc
",V reloads it making changes

map ,v :tabe ~/.vimrc<CR>
map <silent> ,V :source ~/.vimrc<CR>:filetype detect<CR>

"set mouse active
set mouse=a
map ,a :set mouse=a<CR>
map .a :set mouse=vic<CR>

" set shortcut to clear all trailing whitespace
map ,s :%s/\s\+$//g<CR>

" search for visually selected text
:vmap // y/<C-R>"<CR>

map x/ :match none<CR>

" automatically detect .ics files and set syntax accordingly
autocmd! BufRead,BufNewFile *.ics setfiletype icalendar

" associate *.foo with php filetype
au! BufRead,BufNewFile *.app.src setfiletype erlang

nmap ,n :set invnumber<CR>

nnoremap <C-n> <Esc>:cn<Esc>
nnoremap <C-p> <Esc>:cp<Esc>

let g:scmDiffUseAbsPaths = 0

set showtabline=2

" replace groups up to 4 spaces before any non-whitespace characters on all
" lines
function! SanitiseLeadSpace()
	let OK = 1
	while OK == 1
		try
            %s/^\(\s*\)\t/\1    /
			"%s/^\(\t*\)[ ]\{1,4}/\1\t/
		catch
			let OK = 0
		endtry
	endwhile
endfunction
nmap ,l :call SanitiseLeadSpace()<CR>

" switching auto-comments on and off
"
" Default the auto-commenting to :
" continue if inserting a newline in edit mode (using 'Enter')
" NOT continue if adding a newline after a comment (using 'o')
function! ToggleAutoComment()

	let a:strmatch = strridx(&formatoptions, "o")

	if a:strmatch >= 0
		set fo-=o
	else
		set fo+=o
	endif
	let a:strmatch = strridx(&formatoptions, "r")

	if a:strmatch >= 0
		set fo-=r
	else
		set fo+=r
	endif
endfunction
nmap ,c :call ToggleAutoComment()<CR>

set diffexpr=MyDiff()
function! MyDiff()
	let opt = ""
	if exists("g:diffignore") && g:diffignore != ""
			let opt = "-I " . g:diffignore
	endif
	if &diffopt =~ "icase"
		let opt = opt . "-i"
	endif
	if &diffopt =~ "iwhite"
		let opt = opt . "-b"
	endif
	silent execute "!diff -a --binary " . opt . " " . v:fname_in . " " . v:fname_new .
		\ " > " . v:fname_out
endfunction

fun! SetupVAM()
  let c = get(g:, 'vim_addon_manager', {})
  let g:vim_addon_manager = c
  let c.plugin_root_dir = expand('$HOME', 1) . '/.vim/vim-addons'
  " most used options you may want to use:
  let c.log_to_buf = 1
  " let c.auto_install = 0
  let &rtp.=(empty(&rtp)?'':',').c.plugin_root_dir.'/vim-addon-manager'
  if !isdirectory(c.plugin_root_dir.'/vim-addon-manager/autoload')
    execute '!git clone --depth=1 git://github.com/MarcWeber/vim-addon-manager '
        \       shellescape(c.plugin_root_dir.'/vim-addon-manager', 1)
  endif
  call vam#ActivateAddons([], {'auto_install' : 0})
endfun
call SetupVAM()

let plugins = []

" Plugins: Vim Utilities
VAMActivate github:altercation/vim-colors-solarized
let g:solarized_termcolors=256    "default value is 16
let g:solarized_contrast="high"    " high | normal | low
"let g:solarized_visibility="low"    " high | normal | low
" let g:solarized_diffmode="normal"  " high | normal | Low
" let g:solarized_termtrans=1  " 0 | 1
" let g:solarized_hitrail=0    " 0 | 1
set background=dark
colorscheme solarized

call add(plugins, {'name': 'github:xolox/vim-session', 'tag': 'common'})
call add(plugins, {'name': 'github:xolox/vim-misc', 'tag': 'common'})
let g:session_autosave = 'no'

call vam#Scripts(plugins, {'tag_regex': 'common'})
"" SuperTab
VAMActivate Supertab
"call vam#ActivateAddons(['github:tsaleh/vim-align'], {'auto_install' : 0})

VAMActivate matchit.zip
"VAMActivate matchit

"" vv included for Powerline
set laststatus=2
VAMActivate powerline github:zhaocai/linepower.vim

VAMActivate activity-log editorconfig-vim unimpaired

let g:golden_ratio_exclude_nonmodifiable = 1
let g:golden_ratio_autocommand = 0
VAMActivate golden-ratio

"" Plugins: External Utilities
let g:ref_open="vsplit"
"call vam#ActivateAddons(['github:tpope/vim-markdown'], {'auto_install' : 0})
VAMActivate fugitive ack ref github:tpope/vim-markdown " instant-markdown
"VAMActivate github:sanmiguel/helpex.vim
let g:gist_update_on_write=2 " Only update gists on :w!
let g:gist_post_private=1
VAMActivate github:mattn/webapi-vim github:mattn/gist-vim
VAMActivate github:jaxbot/github-issues.vim
let g:github_upstream_issues = 1
if filereadable("~/.vimrc.auth")
    source "~/.vimrc.auth"
endif

""
"" Plugins: Unite
"nnoremap <leader>K :<C-u>Unite ref/erlang -buffer-name=erlang_docs -vertical -start-insert<CR>
"let g:unite_source_grep_command = 'ack'
"let g:unite_source_grep_recursive_opt = ''
"let g:unite_source_grep_default_opts = '--noheading --nocolor '
VAMActivate vimproc vimshell github:Shougo/neomru.vim unite

"" Plugins: Language-specific
VAMActivate github:puppetlabs/puppet-syntax-vim github:smerrill/vagrant-vim github:uarun/vim-protobuf

"" Plugins: Elixir
VAMActivate vim-elixir

"" Plugins: Erlang
let erlang_addons = [
    \ 'github:vim-erlang/vim-rebar',
    \ 'github:vim-erlang/vim-erlang-compiler',
    \ 'github:vim-erlang/vim-erlang-omnicomplete',
    \ 'github:vim-erlang/vim-dialyzer',
    \ 'github:vim-erlang/vim-erlang-runtime',
    \ 'github:vim-erlang/vim-erlang-skeletons',
    \ 'github:vim-erlang/erlang-motions.vim',
    \ 'github:vim-erlang/vim-erlang-tags'
  \ ]


let g:erl_author='<michael.coles@gmail.com>'
let g:erlang_tags_ignore = ["_rel", "debian"]

let g:erlang_make_options = '--outdir ../ebin --xref'

let ft_addons = [
  \ {'on_ft': '^erlang$', 'activate': erlang_addons}
\ ]
au FileType * for l in filter(copy(ft_addons), 'has_key(v:val, "on_ft") && '.string(expand('<amatch>')).' =~ v:val.on_ft')
    \ | call vam#ActivateAddons(l.activate, {'force_loading_plugins_now':1}) | endfor
au BufNewFile,BufRead * for l in filter(copy(ft_addons), 'has_key(v:val, "on_name") && '.string(expand('<amatch>')).' =~ v:val.on_name')
    \ | call vam#ActivateAddons(l.activate, {'force_loading_plugins_now':1}) | endfor

" Scratchpad
" Stuff for tag searches
au FileType erlang set include=^\s*-\s*include

" highlight characters after char 83
highlight OverLength cterm=bold,standout
au BufEnter * match OverLength /\%>83v.\+/

" set up formatoptions how I like it
set formatoptions-=o
set formatoptions+=r
